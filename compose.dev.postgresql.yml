services:
  postgres:
    image: 'postgres:16-alpine'
    environment:
      - 'POSTGRES_DB=tempo_db'
      - 'POSTGRES_USER=tempo_user'
      - 'POSTGRES_PASSWORD=tempo_pass'
      - 'POSTGRES_INITDB_ARGS=--encoding=UTF-8'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U tempo_user -d tempo_db']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: dockerfile.dev
    environment:
      - DATABASE_URL=jdbc:postgresql://postgres:5432/tempo_db
      - DB_USERNAME=tempo_user
      - DB_PASSWORD=tempo_pass
      - APP_SECRET_KEY=secretazertyuiopqsdfghjklmwxcvbnazertyuiopqsdfghjklmwxcvbn
      - APP_JWT_EXPIRATION=86400000
      - JAVA_OPTS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=postgresql
      - SPRING_FLYWAY_ENABLED=true
      # Configuration DevTools
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
      - SPRING_DEVTOOLS_RESTART_POLL_INTERVAL=1000
      - SPRING_DEVTOOLS_RESTART_QUIET_PERIOD=400
    ports:
      - '8080:8080'
      - '35729:35729' # Port pour LiveReload
    volumes:
      # Montage du code source pour le hot reload
      - ./src:/app/src
      - ./pom.xml:/app/pom.xml
      # Cache Maven pour éviter de retélécharger les dépendances
      - maven-cache:/root/.m2
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:
  maven-cache:

networks:
  app-network:
    driver: bridge
