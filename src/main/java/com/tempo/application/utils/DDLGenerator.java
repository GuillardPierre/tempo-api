package com.tempo.application.utils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.core.env.Environment;

import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.metamodel.EntityType;
import jakarta.persistence.metamodel.Metamodel;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Utilitaire Spring Boot pour g√©n√©rer automatiquement les scripts DDL depuis les entit√©s JPA
 * et cr√©er les fichiers de migration Flyway correspondants.
 * 
 * Usage: ./mvnw spring-boot:run -Dspring.profiles.active=ddl-export
 */
@SpringBootApplication
public class DDLGenerator {

    private static final String MIGRATION_DIR = "src/main/resources/db/migration";
    private static final String TEMP_DDL_FILE = "target/generated-schema.sql";
    
    @Autowired
    private Environment env;
    
    @Autowired(required = false)
    private EntityManagerFactory entityManagerFactory;
    
    public static void main(String[] args) {
        // Forcer le profil DDL export
        System.setProperty("spring.profiles.active", "ddl-export");
        
        // D√©sactiver les logs Spring Boot verbeux
        System.setProperty("logging.level.root", "WARN");
        System.setProperty("logging.level.com.tempo.application.utils.DDLGenerator", "INFO");
        
        System.out.println("üîÑ D√©marrage du g√©n√©rateur DDL avec Spring Boot...");
        SpringApplication.run(DDLGenerator.class, args);
    }
    
    // @EventListener - D√©sactiv√© pour le mode d√©veloppement
    public void onApplicationReady(ApplicationReadyEvent event) {
        // V√©rifier si le profil DDL export est actif
        if (!java.util.Arrays.asList(env.getActiveProfiles()).contains("ddl-export")) {
            // Ne pas ex√©cuter la g√©n√©ration DDL en mode d√©veloppement normal
            System.out.println("üîÑ G√©n√©ration DDL d√©sactiv√©e (profil ddl-export non actif)");
            // En mode d√©veloppement, laisser Hibernate g√©rer le DDL
            return;
        }
        
        try {
            System.out.println("üîÑ G√©n√©ration des scripts DDL depuis les entit√©s JPA...");
            
            // 1. G√©n√©rer le script DDL
            generateDDLScript();
            
            // 2. Cr√©er la migration Flyway
            createFlywayMigration();
            
            System.out.println("‚úÖ G√©n√©ration termin√©e avec succ√®s !");
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration DDL : " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
        
        // Arr√™ter l'application apr√®s g√©n√©ration
        System.exit(0);
    }

    /**
     * G√©n√®re le script DDL en utilisant Spring Boot et JPA
     */
    private void generateDDLScript() throws IOException {
        System.out.println("üìä Analyse des entit√©s JPA...");
        
        // V√©rifier que l'EntityManagerFactory est disponible
        if (entityManagerFactory == null) {
            System.out.println("‚ö†Ô∏è EntityManagerFactory non disponible, g√©n√©ration manuelle...");
            generateManualDDL();
            return;
        }
        
        // Analyser le metamodel JPA
        Metamodel metamodel = entityManagerFactory.getMetamodel();
        System.out.println("üìã Entit√©s d√©tect√©es: " + metamodel.getEntities().size());
        
        for (EntityType<?> entity : metamodel.getEntities()) {
            System.out.println("  - " + entity.getName() + " (" + entity.getJavaType().getSimpleName() + ")");
        }
        
        // G√©n√©rer le script DDL manuellement (bas√© sur nos entit√©s connues)
        generateManualDDL();
    }
    
    /**
     * G√©n√®re le DDL manuellement bas√© sur notre mod√®le connu
     */
    private void generateManualDDL() throws IOException {
        StringBuilder ddlScript = new StringBuilder();
        ddlScript.append("-- Sch√©ma g√©n√©r√© automatiquement depuis les entit√©s JPA\n");
        ddlScript.append("-- Date de g√©n√©ration: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
        ddlScript.append("-- G√©n√©rateur: Spring Boot DDL Generator\n\n");
        
        // G√©n√©rer les tables bas√©es sur nos entit√©s
        ddlScript.append(generateUserTable());
        ddlScript.append(generateCategoryTable());
        ddlScript.append(generateWorktimeTable());
        ddlScript.append(generateWorktimeSeriesTable());
        ddlScript.append(generateRecurrenceExceptionTable());
        ddlScript.append(generateRefreshTokenTable());
        ddlScript.append(generateJoinTables());
        ddlScript.append(generateIndexes());

        // Cr√©er le r√©pertoire target s'il n'existe pas
        Path targetDir = Paths.get("target");
        if (!Files.exists(targetDir)) {
            Files.createDirectories(targetDir);
        }

        // √âcrire le fichier
        try (FileWriter writer = new FileWriter(TEMP_DDL_FILE)) {
            writer.write(ddlScript.toString());
        }

        System.out.println("üìÑ Script DDL g√©n√©r√© : " + TEMP_DDL_FILE);
    }

    private String generateUserTable() {
        return """
                -- Table des utilisateurs
                CREATE TABLE IF NOT EXISTS public."user" (
                    id SERIAL PRIMARY KEY,
                    username VARCHAR(255) NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    password VARCHAR(255) NOT NULL,
                    CONSTRAINT uk_user_email UNIQUE (email),
                    CONSTRAINT uk_user_username UNIQUE (username)
                );
                
                """;
    }

    private String generateCategoryTable() {
        return """
                -- Table des cat√©gories
                CREATE TABLE IF NOT EXISTS public.category (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    user_id INTEGER NOT NULL,
                    CONSTRAINT fk_category_user FOREIGN KEY (user_id) REFERENCES public."user"(id)
                );
                
                """;
    }

    private String generateWorktimeTable() {
        return """
                -- Table des cr√©neaux de travail
                CREATE TABLE IF NOT EXISTS public.worktime (
                    id SERIAL PRIMARY KEY,
                    start_time TIMESTAMP NOT NULL,
                    end_time TIMESTAMP,
                    is_active BOOLEAN NOT NULL DEFAULT false,
                    active BOOLEAN NOT NULL DEFAULT true,
                    user_id INTEGER NOT NULL,
                    category_id INTEGER NOT NULL,
                    CONSTRAINT fk_worktime_user FOREIGN KEY (user_id) REFERENCES public."user"(id),
                    CONSTRAINT fk_worktime_category FOREIGN KEY (category_id) REFERENCES public.category(id) ON DELETE CASCADE
                );
                
                """;
    }

    private String generateWorktimeSeriesTable() {
        return """
                -- Table des s√©ries r√©currentes
                CREATE TABLE IF NOT EXISTS public.worktime_series (
                    id BIGSERIAL PRIMARY KEY,
                    start_date TIMESTAMP NOT NULL,
                    end_date TIMESTAMP,
                    start_time TIMESTAMP,
                    end_time TIMESTAMP,
                    recurrence VARCHAR(255),
                    ignore_exceptions BOOLEAN DEFAULT false,
                    user_id INTEGER NOT NULL,
                    category_id INTEGER NOT NULL,
                    CONSTRAINT fk_worktime_series_user FOREIGN KEY (user_id) REFERENCES public."user"(id),
                    CONSTRAINT fk_worktime_series_category FOREIGN KEY (category_id) REFERENCES public.category(id) ON DELETE CASCADE
                );
                
                """;
    }

    private String generateRecurrenceExceptionTable() {
        return """
                -- Table des exceptions de r√©currence
                CREATE TABLE IF NOT EXISTS public.recurrence_exception (
                    id BIGSERIAL PRIMARY KEY,
                    pause_start TIMESTAMP NOT NULL,
                    pause_end TIMESTAMP NOT NULL
                );
                
                """;
    }

    private String generateRefreshTokenTable() {
        return """
                -- Table des tokens de rafra√Æchissement
                CREATE TABLE IF NOT EXISTS public.refresh_token (
                    id SERIAL PRIMARY KEY,
                    token VARCHAR(255) NOT NULL,
                    expiry_date TIMESTAMP NOT NULL,
                    user_id INTEGER NOT NULL,
                    CONSTRAINT uk_refresh_token UNIQUE (token),
                    CONSTRAINT fk_refresh_token_user FOREIGN KEY (user_id) REFERENCES public."user"(id)
                );
                
                """;
    }

    private String generateJoinTables() {
        return """
                -- Table de liaison pour les exceptions de r√©currence
                CREATE TABLE IF NOT EXISTS public.recurrence_exception_series (
                    exception_id BIGINT NOT NULL,
                    series_id BIGINT NOT NULL,
                    PRIMARY KEY (exception_id, series_id),
                    CONSTRAINT fk_exception_series_exception FOREIGN KEY (exception_id) REFERENCES public.recurrence_exception(id),
                    CONSTRAINT fk_exception_series_series FOREIGN KEY (series_id) REFERENCES public.worktime_series(id)
                );
                
                """;
    }
    
    private String generateIndexes() {
        return """
                -- Index pour am√©liorer les performances
                CREATE INDEX IF NOT EXISTS idx_worktime_user_id ON public.worktime(user_id);
                CREATE INDEX IF NOT EXISTS idx_worktime_category_id ON public.worktime(category_id);
                CREATE INDEX IF NOT EXISTS idx_worktime_start_time ON public.worktime(start_time);
                CREATE INDEX IF NOT EXISTS idx_worktime_series_user_id ON public.worktime_series(user_id);
                CREATE INDEX IF NOT EXISTS idx_category_user_id ON public.category(user_id);
                CREATE INDEX IF NOT EXISTS idx_refresh_token_user_id ON public.refresh_token(user_id);
                CREATE INDEX IF NOT EXISTS idx_refresh_token_expiry ON public.refresh_token(expiry_date);
                
                """;
    }

    /**
     * Cr√©e un fichier de migration Flyway depuis le script DDL g√©n√©r√©
     */
    private void createFlywayMigration() throws IOException {
        Path ddlFile = Paths.get(TEMP_DDL_FILE);
        if (!Files.exists(ddlFile)) {
            throw new IOException("Fichier DDL non trouv√© : " + TEMP_DDL_FILE);
        }

        // Cr√©er le r√©pertoire de migration s'il n'existe pas
        Path migrationDir = Paths.get(MIGRATION_DIR);
        if (!Files.exists(migrationDir)) {
            Files.createDirectories(migrationDir);
        }

        // G√©n√©rer le nom du fichier de migration
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));
        String migrationFileName;
        
        // V√©rifier s'il y a d√©j√† une migration V001
        Path initialMigration = migrationDir.resolve("V001__Initial_schema.sql");
        if (Files.exists(initialMigration)) {
            migrationFileName = String.format("V%s__Update_schema.sql", timestamp);
        } else {
            migrationFileName = "V001__Initial_schema.sql";
        }
        
        Path migrationFile = migrationDir.resolve(migrationFileName);

        // Lire le contenu du DDL g√©n√©r√©
        String ddlContent = Files.readString(ddlFile);

        // Cr√©er le header de la migration
        StringBuilder migrationContent = new StringBuilder();
        migrationContent.append("-- Migration g√©n√©r√©e automatiquement depuis les entit√©s JPA\n");
        migrationContent.append("-- G√©n√©r√© le : ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
        migrationContent.append("-- G√©n√©rateur : Spring Boot DDL Generator\n");
        migrationContent.append("-- Description : Sch√©ma de la base de donn√©es Tempo API\n\n");
        
        migrationContent.append(ddlContent);

        // √âcrire le fichier de migration
        Files.writeString(migrationFile, migrationContent.toString());

        System.out.println("üìÅ Migration Flyway cr√©√©e : " + migrationFile);
    }
} 